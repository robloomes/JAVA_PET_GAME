# Toy class object commands
ball="Ball", 10, 10, 10;
slinky="Slinky", 20, 20, 20;
cube="Cube", 30, 30, 30;
plushie="Plushie", 40, 40, 40;
actionFigure="Action figure", 50, 50, 50;
bicycle="Bicycle", 200, 100, 100;

#Food class object commands
biscuit="Biscuit", 5, "small", 5, 30;
fish="Fish", 10, "small", 40, 30; 
chocolate="Chocolate", 10, "small", 5, 60; 
cake="Cake", 20, "large", 10, 75; 
salad="Salad", 30, "large", 50, 25; 
roastBeef="Roast-beef", 50, "large", 75, 75;


		do{
			if (!strPlayerNum.matches("[1-3]")){
				System.out.println("Please enter a valid number between 1 and 3");
			}
			
			strPlayerNum = scan.nextLine();
			
		}
		while(!strPlayerNum.matches("[1-3]"));
		
help1=This game let's 1 or more players own pets, \nwhich can be interacted with for a number of days.  1/6 
help2=Players can choose between a number of different species to choose from,\n\
which each have their own appearance, attributes, behaviors etc.  2/6 
help3=The goal of the game is to keep the pets healthy and happy,\n\
or else they might get sick, misbehave, or die!  3/6
help4=Players can view the attributes of each pet to find out what they need.\n\
If a pet has a issue, there will always be a way to solve it.  4/6
help5=Players start with money to purchase items food or toys from the store,\n\
which have different attributes and prices that have varying effects on pets.  5/6
help6=Each pet is able to take 2 actions per day,\nand the game is over when the last day is finished. Good luck!  6/6

store=Welcome to the store! What will it be today?
food=Food: 
food_cake=(filling, unhealthy) $10. 
food_fish=(filling, healthy) $10.
food_choc=(unfilling, unhealthy) $5.
food_cookie=(unfilling, unhealthy) $5.
food_melon=(unfilling, healthy) $5.
food_pizza=(filling, unhealthy) $10.

species1= "<htm>Cloud: seems to care only about itself,<br> but can bring great joy to others."
species2=2.Crab: loyal but simple. Obsessed with toys.
species3=3.Monster: while scary looking, has a gentle heart beneath the rugged fur.
species4=4.Penguin: not much to be said about this black and white companion.
species5=5.Robot: has great personality for a machine. Spends most of his time recharging his batteries.
species6=6.Snake: is as slippery as he is untrustworthy. Keep a close eye on this one.\n

bugs to fix=

all names can  accept have an empty input!

health= (base stat) + energy + mood - toilet - hunger - FIXED
pet.toilet() shouldn't need Food - FIXED
pet.play() decrease energy not increase. hunger FIXED
pet.eat() increase energy FIXED
pet.health needs toiletneed and sleep included FIXED
get rid of sleep stat, keep only energy FIXED
pet.punish()doesn't work- make it use 1 action per day FIXED
pet.death should use both actions per day, death also needs to make all stats 0 and revive initialise them back to standard - FIXED
pet.sick needs uses 1 action per day FIXED
pet.sick() never uses random number - FIXED
stats should never go below 0 - FIXED
pet.endday() never calls any of the random events - FIXED
toiletNeed can be high and not be calculated into health stat, toilet need decreses mood by a percentage of mood FIXED
new stat- make some pets like playing more than others FIXED with moodMod
create interface to hold objects - FIXED
max number of days is limited?----------------------------------
pets can find money randomly------------------------------------
toys can break and not removed on 1 use - FIXED
game is bugged when a 1 day game is played - FIXED

store= \
FOOD:              TOYS:\n\
\n\
__________________________________________\n\
1.Name: Cookie       7.Name: Yoyo\n\
  Price: 5             Price: 5\n\
  Size: small 	       Durability: 10\n\
  Tastiness: 5         Enjoyment: 20\n\
  Nutrition: 20\n\
  \n\
2.Name: Melon        8.Name: Doll\n\
  Price: 5             Price: 5\n\
  Size: small          Durability: 50 \n\
  Tastiness: 15        Enjoyment: 10\n\
  Nutrition: 20\n\
  \n\
3.Name: Fish         9.Name: Bear\n\
  Price: 10            Price: 5\n\
  Size: large          Durability: 10\n\
  Tastiness: 20        Enjoyment: 10\n\
  Nutrition: 30\n\
  \n\
4.Name: Chocolate    10.Name: Kite\n\
  Price: 5              Price: 10\n\
  Size: small           Durability: 50\n\
  Tastiness: 5          Enjoyment: 50\n\
  Nutrition: 40\n\
  \n\
5.Name: Cake         11.Name: Boat\n\
  Price: 10             Price: 15\n\
  Size: large           Durability: 70\n\
  Tastiness: 10         Enjoyment: 50\n\
  Nutrition: 30\n\
  \n\
6.Name: Pizza        12.Name: Helicopter\n\
  Price: 10             Price: 20\n\
  Size: large           Durability: 100\n\
  Tastiness: 10         Enjoyment: 50\n\
  Nutrition: 40\n\
__________________________________________\
13.QUIT\  

main:1. Select a pet to view and interact with.\n\
2. View status of current pet.\n\
3. Visit the store.\n\
4. Feed pet.\n\
5. Put pet to sleep.\n\
6. Use toy.\n\
7. Use toilet.\n\
8. Punish pet.\n\
9. Visit doctor.\n\
\n\
10. End day (resets actions).\n\

	public String help1 = "<html>This game let's 1 or more players own pets, which can be interacted with for a number of days."
			            + "<html> Players can choose between a number of different species to choose from,<br>"
			            + "<html>which each have their own appearance, attributes, behaviors etc.  (1/5)";
	
	public String help2 = "<html>The goal of the game is to keep the pets healthy and happy,<br>"
			            + "<html> or else they might get sick, misbehave, or die!  (2/5)";
	
	public String help3 = "<html>Players can view the attributes of each pet to find out what they need.<br>"
			            +"<html> If a pet has a issue, there will always be a way to solve it.  (3/5)";

	public String help4 = "<html>Players start with money to purchase items food or toys from the store,<br>"
						+ " which have different attributes and prices that have varying effects on pets.  (4/5)";
	
	public String help5 = "<html>Each pet is able to take 2 actions per day,and the game is over when the last day is finished.<br> Good luck!  (5/5)";
	
	public List<String> existingPetNames = new ArrayList<String>();
	public Map<Integer, Toy> toyChoices = new HashMap<Integer, Toy>();
	public Map<Integer, Food> foodChoices = new HashMap<Integer, Food>();
	public Map<Integer, Species> speciesChoices = new HashMap<Integer, Species>();
	public Map<String, Player> players = new HashMap<String, Player>();
